#!/bin/bash
# vim: set noexpandtab:
#
# Copyright 2014-2019 Holger Levsen <holger@layer-acht.org>
#           ©    2018 Mattia Rizzolo <mattia@debian.org>
#
# released under the GPLv2
#
# deployment helper for jenkins.debian.net and build nodes
# (misses freebsd node)

# disclaimers:
#   this script grew over the years…
#   the code is horrible and was always meant to be a quick local hack and never to be published
#   use at your own risk. it might eat your cats. you have been warned.
#   the HOSTS lists below is yet another code duplication…

# useful things:
# ./deploy_jdn all		- deploy on all nodes (and handle 398 days hosts properly)
# ./deploy_jdn $host		- deploy on $host and jenkins (and handle 398 days hosts properly)
# ./deploy_jdn all $foo		- run "$foo" on all nodes (and handle 398 days hosts properly)
# ./deploy_jdn 			- deploy on jenkins only
# ./deploy_jdn jenkins		- deploy on jenkins only
# ./deploy_jdn jenkins pb10	- deploy on jenkins and pb10
# ./deploy_jdn jenkins o167	- deploy on jenkins and osuosl167
# ./deploy_jdn jenkins c9	- deploy on jenkins and codethink-sled9
# ./deploy_jdn jenkins 10	- deploy on jenkins and pb10
# ./deploy_jdn jenkins 5 6	- deploy on jenkins and pb6 and pb6
# ./deploy_jdn jenkins amd64	- deploy on jenkins and all amd64 nodes
# ./deploy_jdn upgrade		- run "apt-get update && upgrade && clean" everywhere
# ./deploy_jdn upgradey		- run "apt-get upgrade -y" everywhere
# ./deploy_jdn rmstamp		- delete stamp files everywhere


START=$(date +'%s')
GIT_REPO="https://salsa.debian.org/qa/jenkins.debian.net.git"
mapfile -t HOSTS < <(nodes/list_nodes | grep -v jenkins.debian.net)
HOSTS+=(root@jenkins.debian.net)

ALL_HOSTS=("${HOSTS[@]}")

node_in_the_future () {
	case "$1" in
		profitbricks-build5-amd64*|profitbricks-build6-i386*|profitbricks-build15-amd64*|profitbricks-build16-i386*) true ;;
		codethink-sled9*|codethink-sled11*|codethink-sled13*|codethink-sled15*) true ;;
		osuosl-build170*|osuosl-build172*) true ;;
		*) false ;;
	esac
}

echo
echo -n "$(date) - "
reset_clock=true
if [ "$1" = "all" ] ; then
	echo -n "Running j.d.n.git updates on ${HOSTS[@]} now"
	# reset_clock can be false as update_jdn.sh sets the time
	reset_clock=false
	shift
	if [ ! -z "$1" ] ; then
		real_command="$@"
		echo -n "Running '$real_command' on ${HOSTS[@]} now."
		real_command="$@ && echo '__reallyreally=ok__'"
	fi
elif [ "$1" = "upgrade" ] ; then
	real_command="export LANG=C && sudo apt-get update && sudo apt-get upgrade && sudo apt-get dist-upgrade && sudo apt-get clean"
	shift
elif [ "$1" = "upgradey" ] ; then
	real_command="export LANG=C && sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get -y dist-upgrade && sudo apt-get clean"
	shift
elif [ "$1" = "rmstamp" ] ; then
	real_command="sudo rm -f /var/log/jenkins/*stamp && echo '__reallyreally=ok__'"
	reset_clock=false
	shift
elif [ "$1" = "check" ] ; then
	real_command="pgrep -l -a -f _build.sh"
	reset_clock=false
	shift
elif [ "$1" = "" ] ; then
	HOSTS=(root@jenkins.debian.net)
	echo -n "Running j.d.n.git updates on ${HOSTS[@]} now"
elif [ "$1" = "jenkins" ] ; then
	HOSTS=(root@jenkins.debian.net)
	HOSTS=()
	shift
	for i in "$@" ; do
		case "$i" in
			1|pb1)	 HOSTS+=(profitbricks-build1-amd64.debian.net) ;;
			2|pb2)	 HOSTS+=(profitbricks-build2-i386.debian.net) ;;
			5|pb5)	 HOSTS+=(profitbricks-build5-amd64.debian.net) ;;
			6|pb6)	 HOSTS+=(profitbricks-build6-i386.debian.net) ;;
			9|pb9)	 HOSTS+=(profitbricks-build9-amd64.debian.net) ;;
			10|pb10) HOSTS+=(profitbricks-build10-amd64.debian.net) ;;
			11|pb11) HOSTS+=(profitbricks-build11-amd64.debian.net) ;;
			15|pb15) HOSTS+=(profitbricks-build15-amd64.debian.net) ;;
			o167)		HOSTS+=(osuosl-build167-amd64.debian.net) ;;
			o168)		HOSTS+=(osuosl-build168-amd64.debian.net) ;;
			o169)		HOSTS+=(osuosl-build169-amd64.debian.net) ;;
			o170)		HOSTS+=(osuosl-build170-amd64.debian.net) ;;
			o171)		HOSTS+=(osuosl-build171-amd64.debian.net) ;;
			o172)		HOSTS+=(osuosl-build172-amd64.debian.net) ;;
			o173)		HOSTS+=(osuosl-build173-amd64.debian.net) ;;
			o174)		HOSTS+=(osuosl-build174-amd64.debian.net) ;;
			c9|cs9)		HOSTS+=(codethink-sled9-arm64.debian.net) ;;
			c10|cs10)	HOSTS+=(codethink-sled10-arm64.debian.net) ;;
			c11|cs11)	HOSTS+=(codethink-sled11-arm64.debian.net) ;;
			c12|cs12)	HOSTS+=(codethink-sled12-arm64.debian.net) ;;
			c13|cs13)	HOSTS+=(codethink-sled13-arm64.debian.net) ;;
			c14|cs14)	HOSTS+=(codethink-sled14-arm64.debian.net) ;;
			c15|cs15)	HOSTS+=(codethink-sled15-arm64.debian.net) ;;
			c16|cs16)	HOSTS+=(codethink-sled16-arm64.debian.net) ;;
			bbx15) HOSTS+=(bbx15-armhf-rb.debian.net) ;;
			armhf|amd64|i386|arm64)	 HOSTS+=($(echo "${ALL_HOSTS[@]}" | sed -e 's# #\n#g' | grep "$i")) ;;
			*) 	if ping -c 1 "$i" ; then HOSTS+=("$i") ; fi ;;
		esac
	done
	echo -n "Running j.d.n.git updates on ${HOSTS[@]} now"
fi
BG=""

get_arch_color() {
	case "$1" in
		*amd64*)		BG=lightgreen ;;
		*i386*)			BG=lightblue ;;
		*arm64*)		BG=orange ;;
		*armhf*)		BG=lightyellow ;;
		*jenkins.debian.*)	BG=yellow ;;
		*)				BG=white ;;
	esac
}

LOG="$(mktemp -u)"
# reverse the array
STSOH=()
for i in "${HOSTS[@]}" ; do
	STSOH=("$i" "${STSOH[@]}")
done
HOSTS=("${STSOH[@]}")

for i in "${HOSTS[@]}" ; do
	if [ -z "$real_command" ]; then
		if node_in_the_future "$i"; then GITOPTS="-c http.sslVerify=false" ; fi
		# real command, for running manually: cd ~jenkins-adm/jenkins.debian.net/ ; sudo -u jenkins-adm git pull ; ./update_jdn.sh
		read -r -d '' remote_command <<-EOF
			set -e
			export LANG=C
			cd ~jenkins-adm
			if [ ! -d jenkins.debian.net ]; then
				[ -x /usr/bin/git ] || sudo apt-get install -y git
				sudo -u jenkins-adm git ${GITOPTS:-} clone $GIT_REPO
				cd jenkins.debian.net
			else
				cd jenkins.debian.net
				sudo -u jenkins-adm git ${GITOPTS:-} pull $GIT_REPO
			fi
			./update_jdn.sh 2>&1 | sudo tee -a /var/log/jenkins/update_jdn.log
		EOF
	else
		remote_command="$real_command"
	fi

	echo -n "."
	if $reset_clock ; then
		if node_in_the_future "$i" ; then
			#  set correct future date
			case "$i" in
				osuosl*)	NTP_SERVER=time.osuosl.org ;;
				*)		NTP_SERVER=de.pool.ntp.org ;;
			esac
			remote_command="sudo ntpdate -b $NTP_SERVER && $remote_command && sudo date --set=\"+398 days +6 hours + 23 minutes\" && echo '__$(echo $i|cut -d '.' -f1)=ok__'"
		fi
	fi
	get_arch_color $i
	xterm -class deploy-jenkins -bg $BG -fa 'DejaVuSansMono' -fs 10 -e "ssh -o 'BatchMode = yes' -t $i '$remote_command' | tee $LOG.$i ; sleep 2 ; touch $LOG.$i.done" &
	unset GITOPTS
done
sleep 3
COUNTER=0
for i in "${HOSTS[@]}" ; do
	while ! test -f $LOG.$i.done ; do
		let COUNTER+=1
		sleep 1
		echo -n "."
		if [ $COUNTER -eq 42 ] ; then
			echo 
			echo -n "$LOG.$i.done still doesnt exist, how strange…"
			COUNTER=0
			continue
		fi
	done
done
echo

JENKINS_OFFLINE_LIST="$(dirname $0)/jenkins-home/offline_nodes"
echo
echo $JENKINS_OFFLINE_LIST
echo
OFFLINE=""
PROBLEMS=""
for i in "${HOSTS[@]}" ; do
	HNAME1=$(echo $i | cut -d "@" -f2 | cut -d "." -f1|cut -d "-" -f1)	# pb nodes (h01ger)
	HNAME2=$(echo $i | cut -d "@" -f2 | cut -d "." -f1)			# non -armhf ones (vagrant)
	TAIL=$(tail -1 $LOG.$i 2>/dev/null)
	if [ "$i" = "root@jenkins.debian.net" ] ; then
		if ! ( [[ "$TAIL" =~ "__$HNAME1=ok__" ]] || [[ "$TAIL" =~ "__$HNAME2=ok__" ]] || [[ "$TAIL" =~ "__reallyreally=ok__" ]] || [[ "$TAIL" =~ "0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded." ]] ) ; then
			echo "Problems on $i:"
		fi
		cat $LOG.$i
		rm $LOG.$i $LOG.$i.done > /dev/null
	elif [[ "$TAIL" =~ "__$HNAME1=ok__" ]] || [[ "$TAIL" =~ "__$HNAME2=ok__" ]] || [[ "$TAIL" =~ "__reallyreally=ok__" ]] || [[ "$TAIL" =~ "0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded." ]] || [ ! -f $LOG.$i ] ; then
		rm $LOG.$i $LOG.$i.done > /dev/null
	else
		echo "Problems on $i: $TAIL"
		KNOWN_OFFLINE=false
		if [ -f "$JENKINS_OFFLINE_LIST" ]; then
			if grep -q "$i" "$JENKINS_OFFLINE_LIST"; then
				KNOWN_OFFLINE=true
				if [ -z "$OFFLINE" ] ; then
					OFFLINE=" $i"
				else
					OFFLINE=" $i\n$OFFLINE"
				fi
			fi
		fi
		if ! $KNOWN_OFFLINE ; then
			if [ -z "$PROBLEMS" ] ; then
				PROBLEMS=" $i"
			else
				PROBLEMS=" $i\n$PROBLEMS"
			fi
		fi
		get_arch_color $i
		xterm -class deploy-jenkins -bg $BG -fa 'DejaVuSansMono' -fs 10 -e "less +G $LOG.$i ; rm $LOG.$i $LOG.$i.done" &
	fi
done
echo

echo "$(echo "${HOSTS[@]}" | sed -s "s# #\n#g" | wc -l) hosts updated."
if [ ! -z "$PROBLEMS" ] ; then
	echo "Problems on:"
	echo -e "$PROBLEMS"
	echo
fi
if [ ! -z "$OFFLINE" ] ; then
	echo "Offline nodes with unsurprising problems encountered:"
	echo -e "$OFFLINE"
	echo
fi
END=$(date +'%s')
DURATION=$(( $END - $START ))
HOUR=$(echo "$DURATION/3600"|bc)
MIN=$(echo "($DURATION-$HOUR*3600)/60"|bc)
SEC=$(echo "$DURATION-$HOUR*3600-$MIN*60"|bc)
echo "$(date) - total duration: ${HOUR}h ${MIN}m ${SEC}s."
echo

